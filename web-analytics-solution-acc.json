{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description" : "Web analytics using Kinesis Analytics",
  "Parameters" : {
    "Username": {
      "Description": "The username of the user you want to create in Amazon Cognito.",
      "Type": "String",
      "AllowedPattern": "^(?=\\s*\\S).*$",
      "ConstraintDescription": " cannot be empty"
    },
    "Password": {
      "Description": "The password of the user you want to create in Amazon Cognito.",
      "Type": "String",
      "NoEcho": true,
      "AllowedPattern": "^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{6,}$",
      "ConstraintDescription": " must be at least 6 alpha-numeric characters, and contain at least one number."
    },
    "VPC" : {
      "Type" : "AWS::EC2::VPC::Id",
      "Description" : "Pick a VPC for the beacon web server."
    },
    "Subnet" : {
      "Type" : "AWS::EC2::Subnet::Id",
      "Description" : "Subnet Id for a Public subnet in the selected VPC for the beacon web server."
    },
    "key" : {
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "Description" : "Keypair name for instance."
    },
    "Bucket" : {
      "Type" : "String",
      "Description" : "Existing S3 bucket name in this region used to store web analytics traffic." },
    "BucketPrefix" : {
      "Type" : "String",
      "Description" : "S3 bucket prefix used to store analytics traffic in the data bucket."
    },
    "S3HostingBucketName" : {
      "Type" : "String",
      "Description" : "Bucket name to be created for hosting static resourced used for a dashboard.",
      "ConstraintDescription" : "Must be a globally unique bucket name, URL friendly, and may not contain a period.",
      "AllowedPattern" : "^[^\\.]*$"
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Cognito User for Access to the Dashboard"
          },
          "Parameters": [
            "Username",
            "Password"
          ]
        },
        {
          "Label": {
            "default": "Parameters for web server that collects beacon traffic."
          },
          "Parameters": [
            "VPC",
            "Subnet",
            "key"
          ]
        },
        {
          "Label": {
            "default": "Existing S3 location for Kiesis Firehose to store incoming analytics beacon traffic."
          },
          "Parameters": [
            "Bucket",
            "BucketPrefix"
          ]
        },
        {
          "Label": {
            "default": "New S3 Bucket for hosting static dashboard resources."
          },
          "Parameters": [
            "S3HostingBucketName"
          ]
        }        
      ]
    }
  },
  "Mappings" : {
    "RegionMap" : {
      "us-east-1"      : { "m5xlarge" : "ami-55ef662f"},
      "us-east-2"      : { "m5xlarge" : "ami-aa1b34cf"},
      "us-west-1"      : { "m5xlarge" : "ami-1a033c7a"},
      "us-west-2"      : { "m5xlarge" : "ami-32d8124a"},
      "ca-central-1"      : { "m5xlarge" : "ami-ef3b838b"},
      "eu-west-1"      : { "m5xlarge" : "ami-760aaa0f"},
      "eu-central-1"      : { "m5xlarge" : "ami-e28d098d"},
      "ap-southeast-1"      : { "m5xlarge" : "ami-dd7935be"},
      "ap-southeast-2"      : { "m5xlarge" : "ami-1a668878"},
      "ap-northeast-2"      : { "m5xlarge" : "ami-fc862292"},
      "ap-northeast-1"      : { "m5xlarge" : "ami-2803ac4e"},
      "ap-south-1"      : { "m5xlarge" : "ami-2ed19c41"},
      "sa-east-1"      : { "m5xlarge" : "ami-1678037a"}
    }
  },
  "Resources": {
    "CognitoSetupLambdaFunc" : {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "Code": {
          "S3Bucket" : { "Fn::Sub" : "chmars-data-${AWS::Region}" } ,
          "S3Key": "code/cognito-setup.zip"
        },
        "Description": "Creates a Cognito User Pool, Identity Pool, and a User.  Returns IDs to be used in the Kinesis Web Analytics Accelerator.",
        "FunctionName": { "Fn::Sub" : "${AWS::StackName}-SolutionAcceleratorCognitoSetup" },
        "Handler": "createCognitoPool.createPoolAndUser",
        "Role": { "Fn::GetAtt" : ["CognitoLambdaExecutionRole", "Arn"] },
        "Runtime": "nodejs4.3",
        "Timeout": 60
      }
    },    
    "CognitoLambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{ "Effect": "Allow", "Principal": {"Service": ["lambda.amazonaws.com"]}, "Action": ["sts:AssumeRole"] }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "root",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": ["logs:*"],
                "Resource": "arn:aws:logs:*:*:*" },
              {
                "Effect": "Allow",
                "Action": [
                  "cognito-idp:AdminConfirmSignUp",
                  "cognito-idp:CreateUserPoolClient",
                  "cognito-idp:AdminCreateUser"
                ],
                "Resource": [
                  "arn:aws:cognito-idp:*:*:userpool/*"
                ]
              },
              {
                "Effect": "Allow",
                "Action": [
                  "cognito-idp:CreateUserPool",
                  "cognito-identity:*"
                ],
                "Resource": "*" },
              {
                "Effect": "Allow",
                "Action": ["iam:UpdateAssumeRolePolicy"],
                "Resource": [
                  {"Fn::GetAtt" : ["AuthenticatedUserRole", "Arn"] },
                  {"Fn::GetAtt" : ["UnauthenticatedUserRole", "Arn"] }
                ]
              },
              {
                "Effect": "Allow",
                "Action": ["iam:PassRole"],
                "Resource": [
                  {"Fn::GetAtt" : ["AuthenticatedUserRole", "Arn"] },
                  {"Fn::GetAtt" : ["UnauthenticatedUserRole", "Arn"] }
                ]
              }
            ]
          }
        }]
      }
    },
    "SetupCognitoCustom" : {
      "Type": "Custom::CognitoSetupLambdaFunc",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt" : ["CognitoSetupLambdaFunc", "Arn"] },
        "Region": {"Ref": "AWS::Region"},
        "Username": {"Ref": "Username"},
        "Password": {"Ref": "Password"},
        "AuthRoleName": {"Ref": "AuthenticatedUserRole"},
        "UnauthRoleName": {"Ref": "UnauthenticatedUserRole"},
        "AuthRoleArn": { "Fn::GetAtt" : ["AuthenticatedUserRole", "Arn"] },
        "UnauthRoleArn": { "Fn::GetAtt" : ["UnauthenticatedUserRole", "Arn"] },
        "PoolName" : { "Fn::Sub" : "${AWS::StackName}-User Pool" },
        "ClientName" : { "Fn::Sub" : "${AWS::StackName}-Solution Accelerator Dashboard" },
        "S3Bucket" : { "Ref" : "S3HostingBucketName" },
        "MetricsTable" : { "Fn::Sub" : "${AWS::StackName}-Metrics" },
        "MetricDetailsTable" : { "Fn::Sub" : "${AWS::StackName}-MetricDetails" }
      }
    },
    "S3HostingBucket" : {
      "Type" : "AWS::S3::Bucket",
      "Properties" : {
        "BucketName" : { "Ref" : "S3HostingBucketName" },
        "WebsiteConfiguration" : {
          "IndexDocument" : "index.html"
        }
      }
    },
    "S3HostingBucketPolicy" : {
      "Type" : "AWS::S3::BucketPolicy",
      "Properties" : { 
        "Bucket" : { "Ref" : "S3HostingBucket" },
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Principal" : "*",
                "Action": [
                  "s3:GetObject"
                ],
                "Resource": [
                  { "Fn::Join" : [ "" , [
                    {"Fn::GetAtt" : ["S3HostingBucket", "Arn" ]},
                    "/*"
                  ]] }
                ],
                "Effect": "Allow"
              }
            ]
          }
      }
    },
    "AuthenticatedUserRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{ "Effect": "Allow", "Principal": {"Federated": ["cognito-identity.amazonaws.com"]}, "Action": ["sts:AssumeRoleWithWebIdentity"] }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "root",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "dynamodb:Scan"
                ],
                "Resource": [
                  {"Fn::GetAtt" : ["MetricTable", "Arn"] }
                ]
              },
              {
                "Effect": "Allow",
                "Action": [
                  "dynamodb:Query"
                ],
                "Resource": [
                  {"Fn::GetAtt" : ["MetricDetailsTable", "Arn"] }
                ]
              }
            ]
          }
        }]
      }
    },
    "UnauthenticatedUserRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{ "Effect": "Allow", "Principal": {"Federated": ["cognito-identity.amazonaws.com"]}, "Action": ["sts:AssumeRoleWithWebIdentity"] }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "root",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Sid" : "NoOpRole",
                "Effect": "Deny",
                "Action": [
                  "*"
                ],
                "Resource": [
                  "*"
                ]
              }   
            ]
          }
        }]
      }
    },  
    "WebServer": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "Comment": "Enable web server and Kinesis agent",
        "AWS::CloudFormation::Init": {
          "config": {
            "packages": {
              "yum": {
                "httpd" : [],
                "aws-kinesis-agent" : []
              }
            },
            "files": {
              "/etc/aws-kinesis/agent.json": {
                "content": {
                  "Fn::Join" : [ "", [
                    "{",
                    " \"cloudwatch.emitMetrics\": false,\n",
                    " \"maxBufferAgeMillis\" : \"1000\",\n",
                    " \"firehose.endpoint\": \"https://firehose.",
                    {"Ref":"AWS::Region"},
                    ".amazonaws.com\",\n",
                    " \"flows\": [\n",
                    "   {\n",
                    "     \"filePattern\": \"/var/log/httpd/access_log*\",\n",
                    "     \"deliveryStream\": \"",
                          {"Ref" : "DeliveryStream1"},"\",\n",
                    "     \"partitionKeyOption\": \"RANDOM\",\n",
                    "     \"dataProcessingOptions\": [\n",
                    "     {\n",
                    "          \"optionName\": \"LOGTOJSON\",\n",
                    "          \"logFormat\" : \"COMBINEDAPACHELOG\",\n",
                    "          \"matchPattern\": \"^([\\\\d.]+) (\\\\S+) (\\\\S+) \\\\[([\\\\w:/]+\\\\s[+\\\\-]\\\\d{4})\\\\] \\\"(.+?)\\\" (\\\\d{3}) ([0-9]+) \\\"(.+?)\\\" \\\"(.+?)\\\" \\\"(.+?)\\\" \\\"(.+?)\\\" \\\"(.+?)\\\"$\",\n",
                    "          \"customFieldNames\": [\"host\", \"ident\", \"authuser\", \"datetime\", \"request\", \"response\", \"bytes\", \"referrer\", \"agent\", \"event\", \"clientid\", \"page\"]\n",
                    "     }\n",
                    "     ]\n",
                    "   }\n",
                    " ]\n",
                    "}\n"
                    ]
                  ]
                }
              },
              "/var/www/html/index.html" : {
                "content": {
                  "Fn::Join" : [ "\n", [
                    "<HTML><HEAD></HEAD>",
                    "<BODY>AWS Web Analytics Solution Accelerator</BODY>",
                    "</HTML>"
                    ]
                  ]
                }
              }
            },
            "commands": {
              "aa-add-yum-update": {
                "command": "yum update -y"
              },
              "ab1-add-httpd": {
                "command": "yum install httpd -y"
              },              
              "ab2-add-httpd": {
                "command": "yum install aws-kinesis-agent -y"
              },              
              "ac1-add-service-httpd": {
                "command": "chkconfig --add httpd"
              },
              "ac2-make-readable-logs" : {
                  "command" : "chmod -R go+rX /var/log/httpd"
              },
              "ad-add-service-aws-kinesis-agent": {
                "command": "chkconfig --add aws-kinesis-agent"
              },
              "ae-add-service-startup-aws-kinesis-agent": {
                "command": "chkconfig aws-kinesis-agent on"
              },
              "af-add-service-startup-httpd": {
                "command": "chkconfig httpd on"
              },
              "ba-return200s" : {
                "command": "echo \"<Directory \\\"/\\\">\" >> /etc/httpd/conf/httpd.conf"
              },
              "bb-return200s" : {
                "command": "echo \"   RewriteEngine on\" >> /etc/httpd/conf/httpd.conf"
              },
              "bc-return200s" : {
                "command": "echo \"   RewriteRule '^.*' '/var/www/html/index.html'\" >> /etc/httpd/conf/httpd.conf"
              },
              "bd-return200s" : {
                "command": "echo \"</Directory>\" >> /etc/httpd/conf/httpd.conf"
              },
              "ca-add-data-header" : {
                "command" : "sed -i 's/LogFormat \"%h %l %u %t \\\\\"%r\\\\\" %>s %b \\\\\"%{Referer}i\\\\\" \\\\\"%{User-Agent}i\\\\\"\" combined/LogFormat \"%h %l %u %t \\\\\"%r\\\\\" %>s %b \\\\\"%{Referer}i\\\\\" \\\\\"%{User-Agent}i\\\\\" \\\\\"%{event}i\\\\\" \\\\\"%{clientid}i\\\\\" \\\\\"%{page}i\\\\\"\" combined/' /etc/httpd/conf/httpd.conf"
              }              
            },
            "services": {
              "sysvinit": {
                "httpd": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": ["/etc/init.d/httpd"]
                },
                "aws-kinesis-agent" : {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": ["/etc/init.d/aws-kinesis-agent"]
                }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "m5xlarge"]},
        "InstanceType": "m5.xlarge",
        "KeyName": {"Ref" : "key"},
        "IamInstanceProfile": {"Ref" : "KinesisInstanceProfile"},
        "UserData" : { "Fn::Base64" : 
          {
            "Fn::Join" : ["",[
              "#!/bin/bash -xe\n",
              "/opt/aws/bin/cfn-init -v ",
              "   --stack ", {"Ref" : "AWS::StackName"},
              "   --resource WebServer ",
              "   --region ", {"Ref":"AWS::Region"},
              "\n"]]
          }
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": 8
            }
          }
        ],
        "NetworkInterfaces" : [{
          "AssociatePublicIpAddress" : true,
          "DeleteOnTermination" : true,
          "Description" : "Public interface",
          "DeviceIndex" : "0",
          "GroupSet" : [ {"Fn::GetAtt" : [ "WebServerNonSSLSecurityGroup", "GroupId" ]} ],
          "SubnetId" : {"Ref" : "Subnet"}
        }]
      }
    },
    "WebServerNonSSLSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Web port only (80)",
        "VpcId": {"Ref" : "VPC"},
        "SecurityGroupIngress" : [{
            "IpProtocol" : "tcp",
            "FromPort" : "80",
            "ToPort" : "80",
            "CidrIp" : "0.0.0.0/0"}
        ],
        "SecurityGroupEgress" : [{
            "IpProtocol" : "-1",
            "CidrIp" : "0.0.0.0/0"
        }]
      }
    },
    "KinesisInstanceProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path" : "/KinesisInstanceProfile/",
        "Roles" : [ {"Ref" : "WebServerKinesisRole"}]
      }
    },
    "WebServerKinesisRole":{
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "ec2.amazonaws.com" ]
            },
              "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Policies": [ {
          "PolicyName": "puttokinesis",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Action": [
                  "kinesis:PutRecord",
                  "kinesis:PutRecords",
                  "firehose:PutRecord",
                  "firehose:PutRecordBatch"
                ],
                  "Resource" : "*"                
              }]
            }
        }]
      }
    },
    "DeliveryStream1Role" : {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "firehose.amazonaws.com" ]
            },
              "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Policies": [{
          "PolicyName": "s3Access",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "",
                  "Effect": "Allow",
                  "Action": [
                    "s3:AbortMultipartUpload",
                    "s3:GetBucketLocation",
                    "s3:GetObject",
                    "s3:ListBucket",
                    "s3:ListBucketMultipartUploads",
                    "s3:PutObject"
                  ],
                  "Resource": [
                    { "Fn::Join" : [ "" , [
                    "arn:aws:s3:::",
                    {"Ref" : "Bucket" }
                    ]] },
                    { "Fn::Join" : [ "" , [
                    "arn:aws:s3:::",
                    {"Ref" : "Bucket" },
                    "/*"
                    ]] }                    
                  ]
                },
                {
                  "Sid": "",
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    { "Fn::Join" : [ "" , [
                      "arn:aws:logs:",
                      {"Ref":"AWS::Region"},
                      ":",
                      {"Ref":"AWS::AccountId"},
                      ":log-group:/aws/kinesisfirehose/*",
                      ":log-stream:*"
                    ]] }
                  ]
                }
              ]
            }            
        }]
      }
    }, 
    "DeliveryStream1" : {
      "Type" : "AWS::KinesisFirehose::DeliveryStream",
      "Properties" : {
        "DeliveryStreamType" : "DirectPut",
        "S3DestinationConfiguration" : 
        {
          "BucketARN" : 
            { "Fn::Join" : [ "" , [
              "arn:aws:s3:::",
              {"Ref" : "Bucket" }
            ]] },
          "BufferingHints" : {
            "IntervalInSeconds" : "60",
            "SizeInMBs" : "1"
          },
          "CompressionFormat" : "UNCOMPRESSED",
          "Prefix" : {"Ref" : "BucketPrefix"},
          "RoleARN" : { "Fn::GetAtt" : [ "DeliveryStream1Role", "Arn" ] } 
        }
      }
    },
    "OutputStream" : {
      "Type" : "AWS::Kinesis::Stream",
      "Properties" : {
        "Name" : { "Fn::Sub" : "${AWS::StackName}-OutputStream" },
        "RetentionPeriodHours" : 24,
        "ShardCount" : 1
      }
    },
    "KinesisAnalyticsRole" : {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "kinesisanalytics.amazonaws.com" ]
            },
              "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Policies": [{
          "PolicyName": "kinesisaccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [ {
                "Sid": "ReadInputStream",
                "Effect": "Allow",
                "Action": [
                  "firehose:*"
                ],
                "Resource": [{ "Fn::GetAtt" : [ "DeliveryStream1", "Arn" ] } ]
              },
              {
                "Sid": "LisInputStream",
                "Effect": "Allow",
                "Action": [
                  "firehose:ListDeliveryStreams"
                ],
                "Resource": "*"
              },
              {
                "Sid": "WriteOutputStram",
                "Effect": "Allow",
                "Action": [
                  "kinesis:*"
                ],
                "Resource": [ { "Fn::GetAtt" : [ "OutputStream", "Arn" ] } ]
              },
              {
                "Sid": "ReadS3ReferenceData",
                "Effect": "Allow",
                "Action": [
                  "s3:GetObject"
                ],
                "Resource": [ "arn:aws:s3:::kinesis-analytics-placeholder-s3-bucket/kinesis-analytics-placeholder-s3-object" ]
              },
              {
                "Sid": "UseLambdaFunction",
                "Effect": "Allow",
                "Action": [
                  "lambda:InvokeFunction",
                  "lambda:GetFunctionConfiguration"
                ],
                "Resource": "arn:aws:lambda:region:account-id:function:%FUNCTION_NAME_PLACEHOLDER%:%FUNCTION_VERSION_PLACEHOLDER%"
              }]
            }
        } ]
      }
    },    
    "KinesisAnalyticsWebMetricsApplication" : {
      "Type": "AWS::KinesisAnalytics::Application",
      "Properties": {
        "ApplicationName" :  { "Fn::Sub" : "${AWS::StackName}-WebMetricsApplication" },
        "ApplicationDescription" : "Kineis Analytics Web Metrics Solution Accelerator",
        "ApplicationCode" : { "Fn::Join": ["", [ "CREATE STREAM \"DESTINATION_SQL_STREAM\"( \n",
                                                 "    MetricType VARCHAR(16), \n",
                                                 "    EventTimestamp BIGINT, \n",
                                                 "    MetricItem VARCHAR(1024),  \n",
                                                 "    UnitValueInt BIGINT,  \n",
                                                 "    UnitValueFloat DOUBLE);  \n\n",
                                                 "--Active Visitors\n",
                                                 "CREATE OR REPLACE PUMP \"VISTOR_COUNTER_PUMP\" AS\n",
                                                 "INSERT INTO \"DESTINATION_SQL_STREAM\" ( MetricType, EventTimestamp, UnitValueInt)\n",
                                                 "SELECT STREAM 'visitor_count', UNIX_TIMESTAMP(weblogs.window_time), COUNT(weblogs.clientid) FROM (\n",
                                                 "    SELECT STREAM DISTINCT\n",
                                                 "        monotonic (STEP (CHAR_TO_TIMESTAMP('dd/MMM/yyyy:HH:mm:ss z',\"WASA_001\".\"datetime\") by INTERVAL '60' SECOND)) AS window_time,\n",
                                                 "        STEP (\"WASA_001\".ROWTIME BY INTERVAL '60' SECOND),\n",
                                                 "        \"WASA_001\".\"clientid\" as clientid\n",
                                                 "    FROM \"WASA_001\") as weblogs\n",
                                                 "    GROUP BY\n",
                                                 "    window_time;\n\n",
                                                 "--\"Top\" Page Views (group_rank?)\n",
                                                 "CREATE OR REPLACE PUMP \"PAGEVIEWS_PUMP\" AS\n",
                                                 "INSERT INTO \"DESTINATION_SQL_STREAM\" ( MetricType, EventTimestamp, MetricItem, UnitValueInt)\n",
                                                 "SELECT 'top_pages', UNIX_TIMESTAMP(eventTimestamp), page, page_count FROM (\n",
                                                 "    SELECT stream \n",
                                                 "        weblogs.\"page\" as page,\n",
                                                 "        count(*) as page_count,\n",
                                                 "        STEP (CHAR_TO_TIMESTAMP('dd/MMM/yyyy:HH:mm:ss z',weblogs.\"datetime\") by INTERVAL '10' SECOND) as eventTimestamp\n",
                                                 "    FROM \"WASA_001\" weblogs\n",
                                                 "    GROUP BY \n",
                                                 "        STEP (weblogs.ROWTIME BY INTERVAL '10' SECOND),\n",
                                                 "        STEP (CHAR_TO_TIMESTAMP('dd/MMM/yyyy:HH:mm:ss z',weblogs.\"datetime\") by INTERVAL '10' SECOND),\n",
                                                 "        weblogs.\"page\"\n",
                                                 "    HAVING count(*) > 1\n",
                                                 "    ORDER BY STEP (weblogs.ROWTIME BY INTERVAL '10' SECOND), page_count desc\n",
                                                 ");\n\n",
                                                 "-- Events -- \n",
                                                 "CREATE STREAM \"EVENT_STREAM\"( \n",
                                                 "    MetricType VARCHAR(16), \n",
                                                 "    EventTimestamp BIGINT,  \n",
                                                 "    MetricItem VARCHAR(1024),\n",
                                                 "    UnitValueInt BIGINT);  \n",
                                                 "CREATE OR REPLACE PUMP \"SHARED_EVENT_PUMP\" AS\n",
                                                 "INSERT INTO \"EVENT_STREAM\" ( MetricType, EventTimestamp, MetricItem, UnitValueInt)\n",
                                                 "SELECT 'event_count', UNIX_TIMESTAMP(eventTimestamp), event, event_count FROM (\n",
                                                 "    SELECT STREAM\n",
                                                 "        STEP (CHAR_TO_TIMESTAMP('dd/MMM/yyyy:HH:mm:ss z',weblogs.\"datetime\") by INTERVAL '10' SECOND) as eventTimestamp,\n",
                                                 "        weblogs.\"event\" event,\n",
                                                 "        count(*) event_count\n",
                                                 "    FROM \"WASA_001\" weblogs\n",
                                                 "    GROUP BY \n",
                                                 "        weblogs.\"event\",\n",
                                                 "        STEP (CHAR_TO_TIMESTAMP('dd/MMM/yyyy:HH:mm:ss z',weblogs.\"datetime\") by INTERVAL '10' SECOND),\n",
                                                 "        STEP (weblogs.ROWTIME BY INTERVAL '10' SECOND)\n",
                                                 ");\n\n",
                                                 "CREATE OR REPLACE PUMP \"EVENT_PUMP\" AS\n",
                                                 "INSERT INTO \"DESTINATION_SQL_STREAM\" (MetricType, EventTimestamp, MetricItem, UnitValueInt)\n",
                                                 "SELECT STREAM MetricType, EventTimestamp, MetricItem, UnitValueInt FROM \"EVENT_STREAM\";\n\n",
                                                 "--Anomaly detection for event distribution\n",
                                                 "CREATE STREAM \"ANOMALY_TEMP_STREAM\"( \n",
                                                 "    EventTimestampString VARCHAR(16), \n",
                                                 "    MetricItem VARCHAR(1024),\n",
                                                 "    MetricItemInt INTEGER,\n",
                                                 "    UnitValueInt BIGINT,  \n",
                                                 "    AnomalyScore DOUBLE);  \n",
                                                 "CREATE OR REPLACE PUMP \"INTERMEDIATE_ANOMALY_EVENT_PUMP\" AS\n",
                                                 "INSERT INTO \"ANOMALY_TEMP_STREAM\" ( EventTimestampString, MetricItem, MetricItemInt, UnitValueInt, AnomalyScore)\n",
                                                 "SELECT STREAM *\n",
                                                 "FROM TABLE (\n",
                                                 "    RANDOM_CUT_FOREST(\n",
                                                 "        CURSOR(SELECT STREAM \n",
                                                 "            CAST(EventTimestamp AS VARCHAR(16)),\n",
                                                 "            MetricItem,\n",
                                                 "            case MetricItem\n", 
                                                 "            WHEN 'click' THEN 1\n",
                                                 "            WHEN 'pageview' THEN 2\n",
                                                 "            WHEN 'conversion' THEN 3\n",
                                                 "            WHEN 'exception' THEN 4\n",
                                                 "            WHEN 'playvideo' THEN 5\n",
                                                 "            WHEN 'login' THEN 6\n",
                                                 "            WHEN 'logoff' THEN 7\n",
                                                 "            ELSE 0\n",
                                                 "            END, \n",
                                                 "            UnitValueInt FROM \"EVENT_STREAM\"),\n",
                                                 "            100,\n",
                                                 "            256,\n",
                                                 "            100000,\n",
                                                 "            1)\n",
                                                 "    );\n\n",
                                                 "CREATE OR REPLACE PUMP \"ANOMALY_EVENT_PUMP\" AS\n",
                                                 "INSERT INTO \"DESTINATION_SQL_STREAM\" (MetricType, EventTimestamp, MetricItem, UnitValueFloat)\n",
                                                 "SELECT 'event_anomaly', CAST(EventTimestampString AS BIGINT), MetricItem || ':' || CAST(UnitValueInt as VARCHAR(16)), AnomalyScore FROM (\n",
                                                 "    SELECT STREAM \n",
                                                 "        EventTimestampString,\n",
                                                 "        MetricItem,\n",
                                                 "        UnitValueInt,\n",
                                                 "        AnomalyScore\n",
                                                 "    FROM \"ANOMALY_TEMP_STREAM\"\n",
                                                 "    WHERE AnomalyScore > 2.0\n",
                                                 ");\n\n",
                                                 "--agents\n",
                                                 "CREATE OR REPLACE PUMP \"AGENT_PUMP\" AS\n",
                                                 "INSERT INTO \"DESTINATION_SQL_STREAM\" ( MetricType, EventTimestamp, MetricItem, UnitValueInt)\n",
                                                 "SELECT 'agent_count', UNIX_TIMESTAMP(eventTimestamp), agent, agent_count FROM (\n",
                                                 "    SELECT STREAM \n",
                                                 "        weblogs.\"agent\" as agent,\n",
                                                 "        count(*) as agent_count,\n",
                                                 "        STEP (weblogs.ROWTIME BY INTERVAL '10' SECOND) as eventTimestamp\n",
                                                 "    FROM \"WASA_001\" weblogs\n",
                                                 "    GROUP BY \n",
                                                 "        weblogs.\"agent\",\n",
                                                 "        STEP (weblogs.ROWTIME BY INTERVAL '10' SECOND)\n",
                                                 ");\n\n",
                                                 "--referrer (-r) list\n",
                                                 "CREATE OR REPLACE PUMP \"REFERRER_PUMP\" AS\n",
                                                 "INSERT INTO \"DESTINATION_SQL_STREAM\" ( MetricType, EventTimestamp, MetricItem, UnitValueInt)\n",
                                                 "SELECT 'referral_count', UNIX_TIMESTAMP(eventTimestamp), referrer, referrer_count FROM (\n",
                                                 "    SELECT stream \n",
                                                 "        weblogs.\"referrer\" as referrer,\n",
                                                 "        count(*) as referrer_count,\n",
                                                 "        STEP (CHAR_TO_TIMESTAMP('dd/MMM/yyyy:HH:mm:ss z',weblogs.\"datetime\") by INTERVAL '10' SECOND) as eventTimestamp\n",
                                                 "    FROM \"WASA_001\" weblogs\n",
                                                 "    GROUP BY \n",
                                                 "        STEP (weblogs.ROWTIME BY INTERVAL '10' SECOND),\n",
                                                 "        STEP (CHAR_TO_TIMESTAMP('dd/MMM/yyyy:HH:mm:ss z',weblogs.\"datetime\") by INTERVAL '10' SECOND),\n",
                                                 "        weblogs.\"referrer\"\n",
                                                 "    ORDER BY STEP (weblogs.ROWTIME BY INTERVAL '10' SECOND), referrer_count desc\n",
                                                 ");\n\n",
                                                 "--Hourly Events\n",
                                                 "CREATE OR REPLACE PUMP \"HOURLY_EVENT_PUMP\" AS\n",
                                                 "INSERT INTO \"DESTINATION_SQL_STREAM\" ( MetricType, EventTimestamp, MetricItem, UnitValueInt)\n",
                                                 "SELECT 'hourly_events', EventTimestamp, MetricItem, hourly_total FROM (\n",
                                                 "    SELECT STREAM \n",
                                                 "        SUM(UnitValueInt) OVER hourly_window as hourly_total,\n",
                                                 "        MetricItem,\n",
                                                 "        EventTimestamp\n",
                                                 "    FROM \"EVENT_STREAM\"\n",
                                                 "    WINDOW hourly_window AS (\n",
                                                 "        PARTITION BY MetricItem \n",
                                                 "            RANGE INTERVAL '1' HOUR PRECEDING \n",
                                                 "    )\n",
                                                 ");\n" ]]
        },
        "Inputs" : [ {
          "NamePrefix" : "WASA",
          "InputSchema" : {
            "RecordColumns" : [
              {  "Name" : "host",
                 "SqlType" : "VARCHAR(16)",
                 "Mapping" : "$.host"  },
              {  "Name" : "datetime",
                 "SqlType" : "VARCHAR(32)",
                 "Mapping" : "$.datetime"  },                 
              {  "Name" : "request" ,
                 "SqlType" : "VARCHAR(256)",
                 "Mapping" : "$.request" },
              {  "Name" : "response",
                 "SqlType" : "INTEGER",
                 "Mapping" : "$.response" },  
              {  "Name" : "bytes",
                 "SqlType" : "INTEGER",
                 "Mapping" : "$.bytes"  }, 
              {  "Name" : "referrer",
                 "SqlType" : "VARCHAR(32)",
                 "Mapping" : "$.referrer"  },                                    
              {  "Name" : "agent",
                 "SqlType" : "VARCHAR(128)",
                 "Mapping" : "$.agent"  }, 
              {  "Name" : "event",
                 "SqlType" : "VARCHAR(16)",
                 "Mapping" : "$.event"  },                  
              {  "Name" : "clientid",
                 "SqlType" : "VARCHAR(256)",
                 "Mapping" : "$.clientid"  },
              {  "Name" : "page",
                 "SqlType" : "VARCHAR(256)",
                 "Mapping" : "$.page" }                            
            ],
            "RecordFormat" : {
              "RecordFormatType" : "JSON",
              "MappingParameters" : {
                "JSONMappingParameters" : {"RecordRowPath" : "$"}
              }
            }
          },
          "KinesisFirehoseInput" : {
            "ResourceARN" : { "Fn::Join" : ["", [
              "arn:aws:firehose:",
              { "Ref" : "AWS::Region" },
              ":",
              { "Ref" : "AWS::AccountId" },
              ":deliverystream/",
              { "Ref" : "DeliveryStream1" }
            ]]},
             "RoleARN" : { "Fn::GetAtt" : [ "KinesisAnalyticsRole", "Arn" ] }
          }
        }]
      }
    },
    "KinesisAnomalyApplicationOutput" : {
      "Type" : "AWS::KinesisAnalytics::ApplicationOutput",
      "Properties" : {
        "ApplicationName" : {"Ref" : "KinesisAnalyticsWebMetricsApplication" },
        "Output" : {
          "DestinationSchema" : { "RecordFormatType": "JSON" },
          "KinesisStreamsOutput": { 
            "ResourceARN":  { "Fn::GetAtt" : [ "OutputStream", "Arn" ] },
            "RoleARN": { "Fn::GetAtt" : [ "KinesisAnalyticsRole", "Arn" ] }
          }, 
          "Name" : "DESTINATION_SQL_STREAM"
        }
      }
    },
    "MetricTable" : {
      "Type" : "AWS::DynamoDB::Table",
      "Properties" : {
        "AttributeDefinitions" : [ 
          {"AttributeName" : "MetricType" ,"AttributeType" : "S"  }
        ],
        "KeySchema" : [ { "AttributeName" : "MetricType", "KeyType" : "HASH" }],
        "ProvisionedThroughput" : { "ReadCapacityUnits" : 1, "WriteCapacityUnits" : 1 },
        "TableName" : { "Fn::Sub" : "${AWS::StackName}-Metrics" }
      }
    },
    "MetricDetailsTable" : {
        "Type" : "AWS::DynamoDB::Table",
        "Properties" : {
          "AttributeDefinitions" : [ 
            {"AttributeName" : "MetricType" ,"AttributeType" : "S"  },
            {"AttributeName" : "EventTimestamp","AttributeType" : "N"  }         
          ],
          "KeySchema" : [ { "AttributeName" : "MetricType", "KeyType" : "HASH" }, { "AttributeName" : "EventTimestamp", "KeyType" : "RANGE" } ],
          "ProvisionedThroughput" : { "ReadCapacityUnits" : 1, "WriteCapacityUnits" : 4 },
          "TableName" : { "Fn::Sub" : "${AWS::StackName}-MetricDetails" },
          "TimeToLiveSpecification" : { "AttributeName" : "ExpireTime", "Enabled" : true }
        }
    },  
    "ProcessMetricsLambdaRole" : {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "lambda.amazonaws.com" ]
            },
              "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Policies": [ {
          "PolicyName": "RecordProcessingLambdaExecutionRole",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Sid" : "DynamoDBAccess",
              "Effect": "Allow",
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:GetItem",
                "dynamodb:GetRecords",
                "dynamodb:PutItem",
                "dynamodb:Query",
                "dynamodb:Scan",
                "dynamodb:UpdateItem"
              ],
              "Resource": [
                { "Fn::GetAtt" : ["MetricTable","Arn"] },
                { "Fn::GetAtt" : ["MetricDetailsTable","Arn"] }
              ]
            },
            {
              "Sid": "CWLogs",
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutDestination",
                "logs:PutLogEvents"
              ],
              "Resource": ["*"]
            },
            {
                "Sid": "AccessOutputStram",
                "Effect": "Allow",
                "Action": [
                  "kinesis:GetRecords",
                  "kinesis:GetShardIterator",
                  "kinesis:DescribeStream",
                  "kinesis:ListStreams"
                ],
                "Resource": [ { "Fn::GetAtt" : [ "OutputStream", "Arn" ] } ]
            }]
          }
        }]
      }
    },
    "MetricTableSeedFunction" : {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "Code" : {  "ZipFile" : { "Fn::Join": ["", [
            "'use strict';\n",
            "var AWS = require(\"aws-sdk\");\n",
            "AWS.config.update({\n",
            "    region: \"",
            { "Ref" : "AWS::Region" },
            "\" });\n\n",
            "var docClient = new AWS.DynamoDB.DocumentClient();\n",
            "exports.handler = (event, context, callback) => {\n",
            "    console.log('event=' + JSON.stringify(event,null,2));\n",
            "    console.log('context=' + JSON.stringify(context,null,2));\n",
            "    if(event.RequestType == 'Create'){\n",
            "     var seedData = [\n",
            "        { MetricType : 'event_count', AmendmentStrategy : 'add', IsSet : true, IsWholeNumber : true, LatestEventTimestamp : 0 },\n",
            "        { MetricType : 'hourly_events', AmendmentStrategy : 'replace_existing', IsSet : true, IsWholeNumber : true, LatestEventTimestamp : 0 },\n",
            "        { MetricType : 'top_pages', AmendmentStrategy : 'add', IsSet : true, IsWholeNumber : true, LatestEventTimestamp : 0 },\n",
            "        { MetricType : 'visitor_count', AmendmentStrategy : 'add', IsSet : false, IsWholeNumber : true, LatestEventTimestamp : 0 },\n",
            "        { MetricType : 'referral_count', AmendmentStrategy : 'add', IsSet : true, IsWholeNumber : true, LatestEventTimestamp : 0 },\n",
            "        { MetricType : 'event_anomaly', AmendmentStrategy : 'replace', IsSet : false, IsWholeNumber : false, LatestEventTimestamp : 0 },\n",
            "        { MetricType : 'agent_count', AmendmentStrategy : 'add', IsSet : true, IsWholeNumber : true, LatestEventTimestamp : 0 }\n",
            "     ];\n\n",
            "     seedData.forEach( (item) => {\n",
            "        var metricDetailParams = {\n",
            "            TableName : '",
            { "Fn::Sub" : "${AWS::StackName}-Metrics" },
            "',\n",
            "            Item : item,\n",
            "            ConditionExpression : 'attribute_not_exists(MetricType)'\n",
            "        };\n",
            "        docClient.put(metricDetailParams, (err,data) => {\n",
            "            if(err) {console.error(err);}\n",
            "        });\n",
            "     });\n\n",
            "    }\n",
            "    var https = require('https');\n",
            "    var url = require('url');\n",
            "    var parsedUrl = url.parse(event.ResponseURL);\n",
            "    var requestBody = JSON.stringify({\n",
            "        Status: 'SUCCESS',\n",
            "        Reason: 'Worked',\n",
            "        PhysicalResourceId: context.logStreamName,\n",
            "        StackId: event.StackId,\n",
            "        RequestId: event.RequestId,\n",
            "        LogicalResourceId: event.LogicalResourceId,\n",
            "        Data: { message : 'Done'}\n",
            "    });    \n",
            "    var options = {\n",
            "        hostname: parsedUrl.hostname,\n",
            "        port: 443,\n",
            "        path: parsedUrl.path,\n",
            "        method: 'PUT',\n",
            "        headers: {\n",
            "            'content-type': '',\n",
            "            'content-length': requestBody.length\n",
            "        }\n",
            "    };\n",
            "    var request = https.request(options, (response) => {\n",
            "        response.on('data', (data) => {console.log('%s', data);})\n",
            "        response.on('end', () =>{console.log('request ended');});\n",
            "        console.log('requestBody=' + requestBody);\n",
            "    });\n",
            "    request.write(requestBody);\n",
            "    request.end();\n",
            "    context.callbackWaitsForEmptyEventLoop = true; \n",
            "    callback(null, { message : 'Done'}); \n",
            "};\n"
        ]]}},
        "Description" : "Custom Resource to seed Metrics table for the Kinesis Solution Accelerator for Web Analytics",
        "FunctionName" : { "Fn::Sub" : "${AWS::StackName}-SeedFunction" },
        "Handler" : "index.handler",
        "MemorySize" : 128,
        "Role" : { "Fn::GetAtt" : [ "ProcessMetricsLambdaRole", "Arn" ] },
        "Runtime" : "nodejs6.10",
        "Timeout" : 30
      }
    },
    "DynamoDBSeedFunctionCaller" : { 
      "Type" : "Custom::DynamoSeedMetrics",
      "Properties" : {
        "ServiceToken": { "Fn::GetAtt" : ["MetricTableSeedFunction", "Arn"] },
        "Region" : { "Ref" : "AWS::Region"},
        "DependsOn" : ["MetricTableSeedFunction", "MetricTable"]
      }
    },
    "ProcessMetricsFunction" : {
    	"Type" : "AWS::Lambda::Function",
      	"Properties" : {
        	"Code" : {      
  				"S3Bucket" : { "Fn::Sub" : "chmars-data-${AWS::Region}" } ,
  				"S3Key" : "code/wasa.zip"
            },
	        "Environment" : { "Variables" : {"METRIC_TABLE" : { "Fn::Sub" : "${AWS::StackName}-Metrics" }, "METRIC_DETAILS_TABLE" : { "Fn::Sub" : "${AWS::StackName}-MetricDetails" }}},
	        "Description" : "Solution Accelerator for Web Analytics - Function to store Metrics in DynamoDB",
	        "FunctionName" : { "Fn::Sub" : "${AWS::StackName}-ProcessMetricsFunction" },
	        "Handler" : "wasa.handler",
	        "MemorySize" : 128,
	        "Role" : { "Fn::GetAtt" : [ "ProcessMetricsLambdaRole", "Arn" ] },
	        "Runtime" : "nodejs6.10",
	        "Timeout" : 30
        }
    },
    "StartKinesisApplicationFunction" : {
      "Type" : "AWS::Lambda::Function",
        "Properties" : {
          "Code" : {      
          "S3Bucket" : { "Fn::Sub" : "chmars-data-${AWS::Region}" } ,
          "S3Key" : "code/ka-start.zip"
            },
          "Description" : "Solution Accelerator for Web Analytics - Function to start Kinesis Analytics application",
          "FunctionName" : { "Fn::Sub" : "${AWS::StackName}-ka-start" },
          "Handler" : "ka-start.lambda_handler",
          "MemorySize" : 128,
          "Role" : { "Fn::GetAtt" : [ "KinesisAnalyticsStarterLambdaRole", "Arn" ] },
          "Runtime" : "python2.7",
          "Timeout" : 30
        }
    },    
    "KinesisAnalyticsStarter" : { 
      "Type" : "Custom::KinesisAnalyticsStarter",
      "Properties" : {
        "ServiceToken": {"Fn::GetAtt" : ["StartKinesisApplicationFunction", "Arn" ]},
        "AppName" : { "Fn::Sub" : "${AWS::StackName}-WebMetricsApplication" }
      }
    },
    "DashboardDeployLambdaRole" : {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "lambda.amazonaws.com" ]
            },
              "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Policies": [ {
          "PolicyName": "DeployWeb",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              { 
                "Effect": "Allow",
                "Action": [
                  "s3:PutObject",
                  "s3:PutObjectAcl",
                  "s3:DeleteObject",
                  "s3:ListObjects",
                  "s3:ListBucket"                  
                ],
                "Resource" : [
                  { "Fn::Join" : [ "", [
                    { "Fn::GetAtt" : ["S3HostingBucket", "Arn" ]},
                    "/*"
                  ]] },
                  { "Fn::Join" : [ "", [
                    { "Fn::GetAtt" : ["S3HostingBucket", "Arn" ]},
                    "/"
                  ]] },
                  { "Fn::GetAtt" : ["S3HostingBucket", "Arn" ]}
                ]
              },
              { 
                "Effect": "Allow",
                "Action": [
                  "s3:GetObject"
                ],
                "Resource" : [
                  { "Fn::Join" : [ "", [
                     "arn:aws:s3:::",
                     { "Fn::Sub" : "chmars-web-deploy-${AWS::Region}" },
                    "/*"
                  ]] }
                ]
              },              
              {
                "Sid": "CWLogs",
                "Effect": "Allow",
                "Action": [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutDestination",
                  "logs:PutLogEvents"
                ],
                "Resource": ["arn:aws:logs:*:*:*"]
              }
            ]
          }
        }]
      }
    },
    "KinesisAnalyticsStarterLambdaRole" : {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "lambda.amazonaws.com" ]
            },
              "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Policies": [ {
          "PolicyName": "StartApplication",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "kinesisanalytics:StartApplication",
                "kinesisanalytics:DescribeApplication"
              ],
              "Resource" : [
                { "Fn::Join" : [ "", [
                  "arn:aws:kinesisanalytics:",
                  { "Ref" : "AWS::Region" },
                  ":",
                  { "Ref" : "AWS::AccountId" },
                  ":application/",
                  { "Ref" : "KinesisAnalyticsWebMetricsApplication" }
                ]]}
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "kinesisanalytics:ListApplications"
              ],
              "Resource" : [ "*" ]
            },
            {
              "Sid": "CWLogs",
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutDestination",
                "logs:PutLogEvents"
              ],
              "Resource": ["*"]
            }]
          }
        }]
      }
    },
    "LambdaOutputTrigger" : {
    	"Type" : "AWS::Lambda::EventSourceMapping",
    	"Properties" : {
    			"BatchSize" : 100,
    			"Enabled" : true,
    			"EventSourceArn" : { "Fn::GetAtt" : ["OutputStream", "Arn" ]},
    			"FunctionName" : { "Fn::GetAtt" : ["ProcessMetricsFunction", "Arn" ]},
    			"StartingPosition" : "LATEST"
  		}
    },
    "DashboardSetupLambdaFunc" : {
      "Type" : "AWS::Lambda::Function", 
        "Properties" : {
          "Code" : {      
            "S3Bucket" : { "Fn::Sub" : "chmars-data-${AWS::Region}" } ,
            "S3Key" : "code/dashboard_deploy.zip"
          },
          "Description" : "Solution Accelerator for Web Analytics - Function to deploy web pages.",
          "FunctionName" : { "Fn::Sub" : "${AWS::StackName}-dashboard-deploy" },
          "Handler" : "dashboard_deploy.createDashboardComponents",
          "MemorySize" : 128,
          "Role" : { "Fn::GetAtt" : [ "DashboardDeployLambdaRole", "Arn" ] },
          "Runtime" : "nodejs4.3",
          "Timeout" : 120
        }
    },
    "SetupDashboardCustom" : {
      "Type" : "Custom::SetupDashboardCustom",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt" : ["DashboardSetupLambdaFunc", "Arn"] },
        "Region": {"Ref": "AWS::Region"},
        "S3Source": { "Fn::Sub" : "chmars-web-deploy-${AWS::Region}" },
        "S3Destination": {"Ref": "S3HostingBucket"},
        "DashboardURL" : { "Fn::GetAtt": [ "SetupCognitoCustom", "DashboardURL" ] } 
      }
    }
  },
  "Outputs":{
    "DashboardIndexURL": {
      "Description": "The URL to the Dashboard.",
      "Value": { "Fn::GetAtt": [ "SetupDashboardCustom", "IndexURL" ] } 
    },
    "BeaconURL": {
      "Description": "Destination for beacon traffic.",
      "Value": {
        "Fn::Join": ["", [
          "http://", 
          { "Fn::GetAtt": [ "WebServer", "PublicIp" ] },
          "/beacon"
        ]]
      }
    },
    "DataGenerator": {
      "Description": "Generate test data command.",
      "Value": {
        "Fn::Join": ["", [
          "python GetGenerator.py http://", 
          { "Fn::GetAtt": [ "WebServer", "PublicIp" ] },
          "/test 20000 0.5"
        ]]
      }
    }
  }
}
